//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AIvatar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const aIvatarAbi = [
  {
    type: 'constructor',
    inputs: [
      { name: '_manager', internalType: 'address', type: 'address' },
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_agent', internalType: 'address', type: 'address' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'agent',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'expression', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'agenticUpdate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'frozen',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getFreezeNonce',
    outputs: [{ name: 'nonce', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getScopeName',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'imageURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'pure',
  },
  {
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'loadExpression',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'loadMetadata',
    outputs: [
      {
        name: 'data',
        internalType: 'struct AIvatarGenerated.Metadata',
        type: 'tuple',
        components: [
          { name: 'expression', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'loadPackedMetadata',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'slot', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'loadPackedMetadataSlot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'locked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mint',
    outputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintBatch',
    outputs: [
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: 'data',
        internalType: 'struct AIvatarGenerated.Metadata',
        type: 'tuple',
        components: [
          { name: 'expression', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'packMetadata',
    outputs: [{ name: 'slots', internalType: 'uint256[]', type: 'uint256[]' }],
    stateMutability: 'pure',
  },
  {
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFromWithFreezeNonce',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFromWithFreezeNonce',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'schema',
    outputs: [
      {
        name: '',
        internalType: 'struct IPatchworkMetadata.MetadataSchema',
        type: 'tuple',
        components: [
          { name: 'version', internalType: 'uint256', type: 'uint256' },
          {
            name: 'entries',
            internalType: 'struct IPatchworkMetadata.MetadataSchemaEntry[]',
            type: 'tuple[]',
            components: [
              { name: 'id', internalType: 'uint256', type: 'uint256' },
              {
                name: 'permissionId',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'fieldType',
                internalType: 'enum IPatchworkMetadata.FieldType',
                type: 'uint8',
              },
              { name: 'fieldCount', internalType: 'uint256', type: 'uint256' },
              {
                name: 'visibility',
                internalType: 'enum IPatchworkMetadata.FieldVisibility',
                type: 'uint8',
              },
              { name: 'slot', internalType: 'uint256', type: 'uint256' },
              { name: 'offset', internalType: 'uint256', type: 'uint256' },
              { name: 'key', internalType: 'string', type: 'string' },
            ],
          },
        ],
      },
    ],
    stateMutability: 'pure',
  },
  {
    type: 'function',
    inputs: [],
    name: 'schemaURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'pure',
  },
  {
    type: 'function',
    inputs: [{ name: 'newAgent', internalType: 'address', type: 'address' }],
    name: 'setAgent',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'frozen_', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFrozen',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'locked_', internalType: 'bool', type: 'bool' },
    ],
    name: 'setLocked',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'permissions', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPermissions',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'expression', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'storeExpression',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'data',
        internalType: 'struct AIvatarGenerated.Metadata',
        type: 'tuple',
        components: [
          { name: 'expression', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'storeMetadata',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'storePackedMetadata',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'slot', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'storePackedMetadataSlot',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'interfaceID', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFromWithFreezeNonce',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'slots', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'unpackMetadata',
    outputs: [
      {
        name: 'data',
        internalType: 'struct AIvatarGenerated.Metadata',
        type: 'tuple',
        components: [
          { name: 'expression', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    stateMutability: 'pure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_fromTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: '_toTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'BatchMetadataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Frozen',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Locked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'MetadataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'permissions',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PermissionChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'SchemaChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Thawed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Unlocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'ERC721IncorrectOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC721InsufficientApproval',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOperator',
  },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ERC721NonexistentToken',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IncorrectNonce',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotAuthorized',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'NotAuthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFrozen',
  },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'OwnableInvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'OwnableUnauthorizedAccount',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PatchworkProtocol
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const patchworkProtocolAbi = [
  {
    type: 'constructor',
    inputs: [
      { name: 'owner_', internalType: 'address', type: 'address' },
      { name: 'assignerDelegate_', internalType: 'address', type: 'address' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'CONTRACT_UPGRADE_TIMELOCK',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'FEE_CHANGE_TIMELOCK',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'scopeName', internalType: 'string', type: 'string' }],
    name: 'acceptScopeTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      { name: 'addr', internalType: 'address', type: 'address' },
    ],
    name: 'addBanker',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      { name: 'op', internalType: 'address', type: 'address' },
    ],
    name: 'addOperator',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'addProtocolBanker',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      { name: 'addr', internalType: 'address', type: 'address' },
    ],
    name: 'addWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'applyTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragment', internalType: 'address', type: 'address' },
      { name: 'fragmentTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetTokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assign',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragment', internalType: 'address', type: 'address' },
      { name: 'fragmentTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'targetMetadataId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assign',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragments', internalType: 'address[]', type: 'address[]' },
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetTokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assignBatch',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragments', internalType: 'address[]', type: 'address[]' },
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'targetMetadataId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'assignBatch',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: 'scopeName', internalType: 'string', type: 'string' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'balanceOfProtocol',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'scopeName', internalType: 'string', type: 'string' }],
    name: 'cancelScopeTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'scopeName', internalType: 'string', type: 'string' }],
    name: 'claimScope',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'commitAssignerDelegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'commitProtocolFeeConfig',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'scopeName', internalType: 'string', type: 'string' }],
    name: 'commitScopeFeeOverride',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragmentAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getAssignFee',
    outputs: [{ name: 'baseFee', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getMintConfiguration',
    outputs: [
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.MintConfig',
        type: 'tuple',
        components: [
          { name: 'flatFee', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getPatchFee',
    outputs: [{ name: 'baseFee', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getProtocolFeeConfig',
    outputs: [
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.FeeConfig',
        type: 'tuple',
        components: [
          { name: 'mintBp', internalType: 'uint256', type: 'uint256' },
          { name: 'patchBp', internalType: 'uint256', type: 'uint256' },
          { name: 'assignBp', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'scopeName', internalType: 'string', type: 'string' }],
    name: 'getScopeFeeOverride',
    outputs: [
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.FeeConfigOverride',
        type: 'tuple',
        components: [
          { name: 'mintBp', internalType: 'uint256', type: 'uint256' },
          { name: 'patchBp', internalType: 'uint256', type: 'uint256' },
          { name: 'assignBp', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'scopeName', internalType: 'string', type: 'string' }],
    name: 'getScopeOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'scopeName', internalType: 'string', type: 'string' }],
    name: 'getScopeOwnerElect',
    outputs: [{ name: 'ownerElect', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'mintable', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mint',
    outputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'mintable', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintBatch',
    outputs: [
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'originalAddress', internalType: 'address', type: 'address' },
      { name: 'originalTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'patchAddress', internalType: 'address', type: 'address' },
    ],
    name: 'patch',
    outputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'originalAddress', internalType: 'address', type: 'address' },
      { name: 'originalTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'originalAccount', internalType: 'address', type: 'address' },
      { name: 'patchAddress', internalType: 'address', type: 'address' },
    ],
    name: 'patch1155',
    outputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'originalAddress', internalType: 'address', type: 'address' },
      { name: 'patchAddress', internalType: 'address', type: 'address' },
    ],
    name: 'patchAccount',
    outputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'originalAddress', internalType: 'address', type: 'address' },
      { name: 'originalTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'patchAddress', internalType: 'address', type: 'address' },
    ],
    name: 'patchBurned',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'originalAddress', internalType: 'address', type: 'address' },
      { name: 'originalTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'originalAccount', internalType: 'address', type: 'address' },
      { name: 'patchAddress', internalType: 'address', type: 'address' },
    ],
    name: 'patchBurned1155',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'originalAddress', internalType: 'address', type: 'address' },
      { name: 'patchAddress', internalType: 'address', type: 'address' },
    ],
    name: 'patchBurnedAccount',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'proposeAssignerDelegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.FeeConfig',
        type: 'tuple',
        components: [
          { name: 'mintBp', internalType: 'uint256', type: 'uint256' },
          { name: 'patchBp', internalType: 'uint256', type: 'uint256' },
          { name: 'assignBp', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'proposeProtocolFeeConfig',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.FeeConfigOverride',
        type: 'tuple',
        components: [
          { name: 'mintBp', internalType: 'uint256', type: 'uint256' },
          { name: 'patchBp', internalType: 'uint256', type: 'uint256' },
          { name: 'assignBp', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'proposeScopeFeeOverride',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      { name: 'addr', internalType: 'address', type: 'address' },
    ],
    name: 'removeBanker',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      { name: 'op', internalType: 'address', type: 'address' },
    ],
    name: 'removeOperator',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'removeProtocolBanker',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      { name: 'addr', internalType: 'address', type: 'address' },
    ],
    name: 'removeWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragmentAddress', internalType: 'address', type: 'address' },
      { name: 'baseFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAssignFee',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.MintConfig',
        type: 'tuple',
        components: [
          { name: 'flatFee', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'setMintConfiguration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'baseFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPatchFee',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      { name: 'allowUserPatch', internalType: 'bool', type: 'bool' },
      { name: 'allowUserAssign', internalType: 'bool', type: 'bool' },
      { name: 'requireWhitelist', internalType: 'bool', type: 'bool' },
    ],
    name: 'setScopeRules',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'transferScopeOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragment', internalType: 'address', type: 'address' },
      { name: 'fragmentTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'targetMetadataId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unassign',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragment', internalType: 'address', type: 'address' },
      { name: 'fragmentTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetTokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unassign',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragment', internalType: 'address', type: 'address' },
      { name: 'fragmentTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'targetMetadataId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unassignMulti',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragment', internalType: 'address', type: 'address' },
      { name: 'fragmentTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetTokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unassignMulti',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragment', internalType: 'address', type: 'address' },
      { name: 'fragmentTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'targetMetadataId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unassignSingle',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'fragment', internalType: 'address', type: 'address' },
      { name: 'fragmentTokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unassignSingle',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOwnershipTree',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawFromProtocol',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'originalAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'patchAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'patchTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'scopeFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'protocolFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AccountPatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fragmentAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fragmentTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'targetAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'scopeFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'protocolFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Assign',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'AssignFeeChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'AssignerDelegateCommit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'AssignerDelegatePropose',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'originalAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'originalTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'originalAccount',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'patchAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'patchTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'scopeFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'protocolFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ERC1155Patch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'mintable',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'scopeFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'protocolFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'mintable',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'quantity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'scopeFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'protocolFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MintBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'mintable',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.MintConfig',
        type: 'tuple',
        components: [
          { name: 'flatFee', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' },
        ],
        indexed: false,
      },
    ],
    name: 'MintConfigure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'originalAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'originalTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'patchAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'patchTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'scopeFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'protocolFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Patch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PatchFeeChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'banker',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ProtocolBankerAdd',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'banker',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ProtocolBankerRemove',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.FeeConfig',
        type: 'tuple',
        components: [
          { name: 'mintBp', internalType: 'uint256', type: 'uint256' },
          { name: 'patchBp', internalType: 'uint256', type: 'uint256' },
          { name: 'assignBp', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
    ],
    name: 'ProtocolFeeConfigCommit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.FeeConfig',
        type: 'tuple',
        components: [
          { name: 'mintBp', internalType: 'uint256', type: 'uint256' },
          { name: 'patchBp', internalType: 'uint256', type: 'uint256' },
          { name: 'assignBp', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
    ],
    name: 'ProtocolFeeConfigPropose',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProtocolWithdraw',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ScopeAddOperator',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'banker',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ScopeBankerAdd',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'banker',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ScopeBankerRemove',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ScopeClaim',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.FeeConfigOverride',
        type: 'tuple',
        components: [
          { name: 'mintBp', internalType: 'uint256', type: 'uint256' },
          { name: 'patchBp', internalType: 'uint256', type: 'uint256' },
          { name: 'assignBp', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' },
        ],
        indexed: false,
      },
    ],
    name: 'ScopeFeeOverrideCommit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'config',
        internalType: 'struct IPatchworkProtocol.FeeConfigOverride',
        type: 'tuple',
        components: [
          { name: 'mintBp', internalType: 'uint256', type: 'uint256' },
          { name: 'patchBp', internalType: 'uint256', type: 'uint256' },
          { name: 'assignBp', internalType: 'uint256', type: 'uint256' },
          { name: 'active', internalType: 'bool', type: 'bool' },
        ],
        indexed: false,
      },
    ],
    name: 'ScopeFeeOverridePropose',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ScopeRemoveOperator',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'allowUserPatch',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'allowUserAssign',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'requireWhitelist',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'ScopeRuleChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ScopeTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ScopeTransferCancel',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ScopeTransferElect',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ScopeWhitelistAdd',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ScopeWhitelistRemove',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'scopeName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ScopeWithdraw',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fragmentAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fragmentTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'targetAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Unassign',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'patchAddress', internalType: 'address', type: 'address' },
    ],
    name: 'AccountAlreadyPatched',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'patchAddress', internalType: 'address', type: 'address' },
    ],
    name: 'AlreadyPatched',
  },
  { type: 'error', inputs: [], name: 'BadInputLengths' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotLockSoulboundPatch',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'addr2', internalType: 'address', type: 'address' },
      { name: 'tokenId2', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'DataIntegrityError',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'patchAddress', internalType: 'address', type: 'address' },
    ],
    name: 'ERC1155AlreadyPatched',
  },
  { type: 'error', inputs: [], name: 'FailedToSend' },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FragmentAlreadyAssigned',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'FragmentAlreadyRegistered',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FragmentNotAssigned',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'targetAddress', internalType: 'address', type: 'address' },
      { name: 'targetTokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FragmentNotAssignedToTarget',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'FragmentRedacted',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'FragmentUnregistered',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Frozen',
  },
  { type: 'error', inputs: [], name: 'IncorrectFeeAmount' },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IncorrectNonce',
  },
  { type: 'error', inputs: [], name: 'InsufficientFunds' },
  { type: 'error', inputs: [], name: 'InvalidFeeValue' },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Locked',
  },
  { type: 'error', inputs: [], name: 'MintNotActive' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'MintNotAllowed',
  },
  { type: 'error', inputs: [], name: 'NoDelegateProposed' },
  { type: 'error', inputs: [], name: 'NoProposedFeeSet' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotAuthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFrozen',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotPatchworkAssignable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'scopeName', internalType: 'string', type: 'string' },
      { name: 'addr', internalType: 'address', type: 'address' },
    ],
    name: 'NotWhitelisted',
  },
  { type: 'error', inputs: [], name: 'OutOfIDs' },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'OwnableInvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'OwnableUnauthorizedAccount',
  },
  { type: 'error', inputs: [], name: 'ReentrancyGuardReentrantCall' },
  {
    type: 'error',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'fragment', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'RefNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'scopeName', internalType: 'string', type: 'string' }],
    name: 'ScopeDoesNotExist',
  },
  {
    type: 'error',
    inputs: [{ name: 'scopeName', internalType: 'string', type: 'string' }],
    name: 'ScopeExists',
  },
  {
    type: 'error',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'ScopeTransferNotAllowed',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'SelfAssignmentNotAllowed',
  },
  { type: 'error', inputs: [], name: 'TimelockNotElapsed' },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'TransferBlockedByAssignment',
  },
  {
    type: 'error',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'TransferNotAllowed',
  },
  { type: 'error', inputs: [], name: 'UnsupportedContract' },
  { type: 'error', inputs: [], name: 'UnsupportedOperation' },
  {
    type: 'error',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'UnsupportedTokenId',
  },
] as const
